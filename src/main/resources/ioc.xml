<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">

  <bean id="person01" class="com.atguigu.springlearn.ioc.bean.Person">
    <property name="age" value="18"></property>
  </bean>

  <!--实验3：通过构造器为bean的属性赋值（index,type属性介绍）=============================================================-->
  <bean id="person0301" class="com.atguigu.springlearn.ioc.bean.Person">
    <constructor-arg name="lastName" value="XXX"></constructor-arg>
    <constructor-arg name="age" value="15"></constructor-arg>
    <constructor-arg name="email" value="XXX@gmai.com"></constructor-arg>
    <constructor-arg name="gender" value="1"></constructor-arg>
  </bean>

  <!--通过p名称空间为bean赋值-->
  <bean id="person0302" class="com.atguigu.springlearn.ioc.bean.Person" p:age="15" p:email="xx@fuckmai.com" p:gender="1"
        p:lastName="fuck"></bean>

  <!--实验4：正确的为各种属性赋值===========================================================================================-->
  <!--引用类型赋值（引用其他bean、引用内部bean）-->
  <bean id="car0401" class="com.atguigu.springlearn.ioc.bean.Car">
    <property name="carName" value="BMW"></property>
    <property name="color" value="red"></property>
    <property name="price" value="3000"></property>
  </bean>
  <bean id="person0401" class="com.atguigu.springlearn.ioc.bean.Person">
    <property name="car" ref="car0401"></property>
  </bean>
  <!--集合类型赋值（List、Map、Properties）-->
  <bean id="book0402" class="com.atguigu.springlearn.ioc.bean.Book">
    <property name="author" value="British"></property>
    <property name="bookName" value="Haha"></property>
  </bean>
  <bean id="person0402" class="com.atguigu.springlearn.ioc.bean.Person">
    <property name="bookList">
      <list>
        <bean class="com.atguigu.springlearn.ioc.bean.Book" p:bookName="Thinking In Java" p:author="James"></bean>
        <ref bean="book0402"></ref>
      </list>
    </property>
    <property name="maps">
      <map>
        <entry key="01" value="AA"></entry>
        <entry key="02" value-ref="car0401"></entry>
      </map>
    </property>
    <property name="properties">
      <props>
        <prop key="user">root</prop>
        <prop key="password">123456</prop>
      </props>
    </property>
  </bean>
  <!--util名称空间创建集合类型的bean-->
  <util:map id="comMap01">
    <entry key="comKey01" value="comVal01"></entry>
    <entry key="comKey02" value="comVal02"></entry>
  </util:map>
  <util:list id="comList01">
    <bean class="com.atguigu.springlearn.ioc.bean.Book" p:author="Mike" p:bookName="Fighting For Win"></bean>
    <ref bean="book0402"></ref>
  </util:list>
  <util:properties id="comProp01">
    <prop key="comProp01">comPropVal01</prop>
    <prop key="comProp02">comPropVal02</prop>
  </util:properties>
  <!--通过abstract属性创建一个模板bean-->
  <bean id="absPerson01" abstract="true" class="com.atguigu.springlearn.ioc.bean.Person">
    <property name="bookList" ref="comList01"></property>
    <property name="maps" ref="comMap01"></property>
    <property name="properties" ref="comProp01"></property>
  </bean>
  <bean id="person0403" parent="absPerson01"></bean>
  <!--级联属性赋值-->
  <bean id="person0404" class="com.atguigu.springlearn.ioc.bean.Person">
    <property name="car" ref="car0401"></property>
    <property name="car.price" value="25000"></property>
  </bean>

  <!--实验5：配置通过静态工厂方法创建的bean================================================================================
  class属性指定静态工厂全类名，factory-method指定要调用的方法，然后使用constructor-arg给方法传递参数-->
  <bean id="car0501" class="com.atguigu.springlearn.ioc.factory.BookStaticFactory" factory-method="getBook">
    <!--为工厂方法指定参数-->
    <constructor-arg name="bookName" value="射雕英雄传"></constructor-arg>
  </bean>
  <!--实例工厂方法创建的bean、FactoryBean
  1.先创建实例工厂对象；
  2.配置对象使用上一步创建好的实例工厂对象，其中factory-bean指定当前bean对象使用哪个实例工厂对象创建对象，
  factory-method指定用哪个工厂方法，工厂方法中要使用到的参数依然用constructor-arg赋值-->
  <bean id="bookInstanceFactory" class="com.atguigu.springlearn.ioc.factory.BookInstanceFactory"></bean>
  <bean id="car0502" class="com.atguigu.springlearn.ioc.bean.Book" factory-bean="bookInstanceFactory" factory-method="getBook">
    <constructor-arg value="神雕侠侣"></constructor-arg>
  </bean>
  <!--实现Spring的FactoryBean进行工厂创建目标对象-->
  <bean id="BookFactoryBySpring" class="com.atguigu.springlearn.ioc.factory.BookFactoryBySpring"></bean>

  <!--TODO 实验10：创建带有生命周期方法的bean==============================================================================-->
  <bean id="book1001" class="com.atguigu.springlearn.ioc.bean.Book" init-method="bookInit" destroy-method="bookDestroy"></bean>

  <!--TODO 实验11：测试bean的后置处理器===================================================================================-->
  <bean id="beanPostProcessor1101" class="com.atguigu.springlearn.ioc.bean.MyBeanPostProcessor"></bean>

  <!--实验12：=============================================================================================================
  引用外部属性文件★依赖context名称空间来进行外部文件(properties文件)的引用
  加载外部配置文件：classpath:固定写法表示引用类路径下的一个资源-->
  <context:property-placeholder location="classpath:config/mybatis/db.properties"></context:property-placeholder>
  <!--直接在class属性中寻找要导入的包，IDEA会帮我们自动完成相应包的全路径
  ${key}动态去除配置文件中的值：要注意key值尽量不要用username，因为username是spring中的一个关键字,
  所以在进行配置文件时候尽量带上类似jdbc这样的前缀-->
  <bean id="comboPooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    <property name="user" value="${jdbc.username}"></property>
    <property name="password" value="${jdbc.password}"></property>
    <property name="driverClass" value="${jdbc.driverClass}"></property>
    <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
  </bean>

  <!--实验14：[SpEL测试I](Spring Expressive Language:Spring的表达式语言)==================================================================================================
    其实就是通过#{XXX}进行基本类型的运算、xml配置文件中类型的引用、三方jar包调用-->
  <bean id="person1401" class="com.atguigu.springlearn.ioc.bean.Person">
    <!--使用运算符-->
    <property name="salary" value="#{112.23*25}"></property>
    <!--引用其他bean的某个属性值-->
    <property name="car" value="#{car0401}"></property>
    <!--引用其他bean-->
    <property name="bookList" value="#{comList01}"></property>
    <!--调用静态方法
    满足语法规则：#{T(全类名).静态方法(args)},比如下面调用UUID.randomUUID().toString()-->
    <property name="lastName" value="#{T(java.util.UUID).randomUUID().toString().substring(0,5)}"></property>
    <!--调用非静态方法-->
    <property name="email" value="#{person0301.getEmail()}"></property>
  </bean>

</beans>